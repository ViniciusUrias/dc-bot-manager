
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "typedSql"]
}

// generator typescriptInterfaces {
//   provider = "prisma-generator-typescript-interfaces"
//   output   = "../src/generated/types.ts"
// }

generator zod {
  output = "../src/types"
  provider       = "zod-prisma-types"
  createInputTypes = false
  addInputTypeValidation = false
  addSelectType = false
  useDefaultValidators = false
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
  Bot Bot[]
  Server Server[]
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Server {
  id        String   @id @default(uuid())
  name      String   @unique
  description      String?  
  ownerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  serverid  String?  @unique(map: "server_unique")
  bots      Bot[]
  owner     User     @relation(fields: [ownerId], references: [id])
}

model Bot {
  id             String      @id @default(uuid())
  name           String
  token          String
  active         Boolean     @default(true)
  ownerId        String
  prefix         String      @default("!")
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  description    String      @default("")
  tags           String[]    @default([])
  icon           String?     
  serverId       String
  analytics      Analytics[]
  owner          User        @relation(fields: [ownerId], references: [id])
  server         Server      @relation(fields: [serverId], references: [id])
  configurations BotConfig[]
  commands       Command[]
  events         Event[]
}

model Command {
  id          String              @id @default(uuid())
  name        String
  description String
  response    String
  enabled     Boolean             @default(true)
  botId       String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  bot         Bot                 @relation(fields: [botId], references: [id])
  permissions CommandPermission[]
  usage       CommandUsage[]
}

model CommandPermission {
  id        String   @id @default(uuid())
  commandId String
  roleId    String
  allow     Boolean  @default(true)
  createdAt DateTime @default(now())
  command   Command  @relation(fields: [commandId], references: [id])
}

model Event {
  id        String   @id @default(uuid())
  name      String
  action    String
  enabled   Boolean  @default(true)
  botId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bot       Bot      @relation(fields: [botId], references: [id])
}

model BotConfig {
  id        String   @id @default(uuid())
  key       String
  value     String
  botId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bot       Bot      @relation(fields: [botId], references: [id])
}

model CommandUsage {
  id        String   @id @default(uuid())
  commandId String
  userId    String
  guildId   String
  channelId String
  timestamp DateTime @default(now())
  command   Command  @relation(fields: [commandId], references: [id])
}

model Analytics {
  id        String   @id @default(uuid())
  botId     String
  eventType String
  data      String
  timestamp DateTime @default(now())
  bot       Bot      @relation(fields: [botId], references: [id])
}
