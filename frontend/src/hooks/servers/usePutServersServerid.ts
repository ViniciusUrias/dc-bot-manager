/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../api/services/axios.ts'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../api/services/axios.ts'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  putV1ServersServeridMutationRequest,
  putV1ServersServeridMutationResponse,
  putV1ServersServeridPathParams,
} from '../../gen/types/servers/putServersServerid.ts'
import { useMutation } from '@tanstack/react-query'

export const putV1ServersServeridMutationKey = () => [{ url: '/v1/servers/{serverId}' }] as const

export type PutV1ServersServeridMutationKey = ReturnType<typeof putV1ServersServeridMutationKey>

/**
 * {@link /v1/servers/:serverId}
 */
export async function putV1ServersServerid(
  serverId: putV1ServersServeridPathParams['serverId'],
  data: putV1ServersServeridMutationRequest,
  config: Partial<RequestConfig<putV1ServersServeridMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<putV1ServersServeridMutationResponse, ResponseErrorConfig<Error>, putV1ServersServeridMutationRequest>({
    method: 'PUT',
    url: `/v1/servers/${serverId}`,
    data,
    ...requestConfig,
  })
  return res
}

/**
 * {@link /v1/servers/:serverId}
 */
export function usePutV1ServersServerid<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<putV1ServersServeridMutationResponse>,
      ResponseErrorConfig<Error>,
      { serverId: putV1ServersServeridPathParams['serverId']; data: putV1ServersServeridMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<putV1ServersServeridMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? putV1ServersServeridMutationKey()

  return useMutation<
    ResponseConfig<putV1ServersServeridMutationResponse>,
    ResponseErrorConfig<Error>,
    { serverId: putV1ServersServeridPathParams['serverId']; data: putV1ServersServeridMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ serverId, data }) => {
        return putV1ServersServerid(serverId, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}