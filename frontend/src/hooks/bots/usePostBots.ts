/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../api/services/axios.ts'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../api/services/axios.ts'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type { postV1BotsMutationRequest, postV1BotsMutationResponse } from '../../gen/types/bots/postBots.ts'
import { useMutation } from '@tanstack/react-query'

export const postV1BotsMutationKey = () => [{ url: '/v1/bots/' }] as const

export type PostV1BotsMutationKey = ReturnType<typeof postV1BotsMutationKey>

/**
 * {@link /v1/bots/}
 */
export async function postV1Bots(
  data?: postV1BotsMutationRequest,
  config: Partial<RequestConfig<postV1BotsMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<postV1BotsMutationResponse, ResponseErrorConfig<Error>, postV1BotsMutationRequest>({
    method: 'POST',
    url: `/v1/bots/`,
    data,
    ...requestConfig,
  })
  return res
}

/**
 * {@link /v1/bots/}
 */
export function usePostV1Bots<TContext>(
  options: {
    mutation?: UseMutationOptions<ResponseConfig<postV1BotsMutationResponse>, ResponseErrorConfig<Error>, { data?: postV1BotsMutationRequest }, TContext> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig<postV1BotsMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? postV1BotsMutationKey()

  return useMutation<ResponseConfig<postV1BotsMutationResponse>, ResponseErrorConfig<Error>, { data?: postV1BotsMutationRequest }, TContext>(
    {
      mutationFn: async ({ data }) => {
        return postV1Bots(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}