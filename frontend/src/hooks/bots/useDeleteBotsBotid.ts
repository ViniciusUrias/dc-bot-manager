/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../api/services/axios.ts'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '../../api/services/axios.ts'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type { deleteV1BotsBotidMutationResponse, deleteV1BotsBotidPathParams } from '../../gen/types/bots/deleteBotsBotid.ts'
import { useMutation } from '@tanstack/react-query'

export const deleteV1BotsBotidMutationKey = () => [{ url: '/v1/bots/{botId}' }] as const

export type DeleteV1BotsBotidMutationKey = ReturnType<typeof deleteV1BotsBotidMutationKey>

/**
 * {@link /v1/bots/:botId}
 */
export async function deleteV1BotsBotid(botId: deleteV1BotsBotidPathParams['botId'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<deleteV1BotsBotidMutationResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'DELETE',
    url: `/v1/bots/${botId}`,
    ...requestConfig,
  })
  return res
}

/**
 * {@link /v1/bots/:botId}
 */
export function useDeleteV1BotsBotid<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<deleteV1BotsBotidMutationResponse>,
      ResponseErrorConfig<Error>,
      { botId: deleteV1BotsBotidPathParams['botId'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? deleteV1BotsBotidMutationKey()

  return useMutation<ResponseConfig<deleteV1BotsBotidMutationResponse>, ResponseErrorConfig<Error>, { botId: deleteV1BotsBotidPathParams['botId'] }, TContext>(
    {
      mutationFn: async ({ botId }) => {
        return deleteV1BotsBotid(botId, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}