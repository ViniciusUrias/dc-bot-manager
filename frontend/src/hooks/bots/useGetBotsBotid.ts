/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../api/services/axios.ts'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../api/services/axios.ts'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type { getV1BotsBotidQueryResponse, getV1BotsBotidPathParams } from '../../gen/types/bots/getBotsBotid.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getV1BotsBotidQueryKey = (botId: getV1BotsBotidPathParams['botId']) => [{ url: '/v1/bots/:botId', params: { botId: botId } }] as const

export type GetV1BotsBotidQueryKey = ReturnType<typeof getV1BotsBotidQueryKey>

/**
 * {@link /v1/bots/:botId}
 */
export async function getV1BotsBotid(botId: getV1BotsBotidPathParams['botId'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<getV1BotsBotidQueryResponse, ResponseErrorConfig<Error>, unknown>({ method: 'GET', url: `/v1/bots/${botId}`, ...requestConfig })
  return res
}

export function getV1BotsBotidQueryOptions(botId: getV1BotsBotidPathParams['botId'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = getV1BotsBotidQueryKey(botId)
  return queryOptions<ResponseConfig<getV1BotsBotidQueryResponse>, ResponseErrorConfig<Error>, ResponseConfig<getV1BotsBotidQueryResponse>, typeof queryKey>({
    enabled: !!botId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getV1BotsBotid(botId, config)
    },
  })
}

/**
 * {@link /v1/bots/:botId}
 */
export function useGetV1BotsBotid<
  TData = ResponseConfig<getV1BotsBotidQueryResponse>,
  TQueryData = ResponseConfig<getV1BotsBotidQueryResponse>,
  TQueryKey extends QueryKey = GetV1BotsBotidQueryKey,
>(
  botId: getV1BotsBotidPathParams['botId'],
  options: {
    query?: Partial<QueryObserverOptions<ResponseConfig<getV1BotsBotidQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getV1BotsBotidQueryKey(botId)

  const query = useQuery(
    {
      ...(getV1BotsBotidQueryOptions(botId, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}