/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../api/services/axios.ts'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '../../../api/services/axios.ts'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type { getV1ServersServeridQueryResponse, getV1ServersServeridPathParams, getV1ServersServerid404 } from '../../types/servers/getServersServerid.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getV1ServersServeridQueryKey = (serverId: getV1ServersServeridPathParams['serverId']) =>
  [{ url: '/v1/servers/:serverId', params: { serverId: serverId } }] as const

export type GetV1ServersServeridQueryKey = ReturnType<typeof getV1ServersServeridQueryKey>

/**
 * @description Get server by id
 * {@link /v1/servers/:serverId}
 */
export async function getV1ServersServerid(
  serverId: getV1ServersServeridPathParams['serverId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<getV1ServersServeridQueryResponse, ResponseErrorConfig<getV1ServersServerid404>, unknown>({
    method: 'GET',
    url: `/v1/servers/${serverId}`,
    ...requestConfig,
  })
  return res
}

export function getV1ServersServeridQueryOptions(
  serverId: getV1ServersServeridPathParams['serverId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getV1ServersServeridQueryKey(serverId)
  return queryOptions<
    ResponseConfig<getV1ServersServeridQueryResponse>,
    ResponseErrorConfig<getV1ServersServerid404>,
    ResponseConfig<getV1ServersServeridQueryResponse>,
    typeof queryKey
  >({
    enabled: !!serverId,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getV1ServersServerid(serverId, config)
    },
  })
}

/**
 * @description Get server by id
 * {@link /v1/servers/:serverId}
 */
export function useGetV1ServersServerid<
  TData = ResponseConfig<getV1ServersServeridQueryResponse>,
  TQueryData = ResponseConfig<getV1ServersServeridQueryResponse>,
  TQueryKey extends QueryKey = GetV1ServersServeridQueryKey,
>(
  serverId: getV1ServersServeridPathParams['serverId'],
  options: {
    query?: Partial<
      QueryObserverOptions<ResponseConfig<getV1ServersServeridQueryResponse>, ResponseErrorConfig<getV1ServersServerid404>, TData, TQueryData, TQueryKey>
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getV1ServersServeridQueryKey(serverId)

  const query = useQuery(
    {
      ...(getV1ServersServeridQueryOptions(serverId, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<getV1ServersServerid404>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}