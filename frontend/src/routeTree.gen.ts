/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthRouteImport } from './routes/auth/route'
import { Route as AppRouteImport } from './routes/app/route'
import { Route as AuthRegisterImport } from './routes/auth/register'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as AppServersRouteImport } from './routes/app/servers/route'
import { Route as AppServersIndexImport } from './routes/app/servers/index'
import { Route as AppServersCreateImport } from './routes/app/servers/create'
import { Route as AppServersServerIdIndexImport } from './routes/app/servers/$serverId/index'
import { Route as AppServersServerIdBotsNewImport } from './routes/app/servers/$serverId/bots/new'
import { Route as AppServersServerIdBotsBotIdIndexImport } from './routes/app/servers/$serverId/bots/$botId/index'
import { Route as AppServersServerIdBotsBotIdCommandsNewImport } from './routes/app/servers/$serverId/bots/$botId/commands/new'
import { Route as AppServersServerIdBotsBotIdCommandsCommandNameImport } from './routes/app/servers/$serverId/bots/$botId/commands/$commandName'

// Create/Update Routes

const AuthRouteRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const AppRouteRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AppServersRouteRoute = AppServersRouteImport.update({
  id: '/servers',
  path: '/servers',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppServersIndexRoute = AppServersIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppServersRouteRoute,
} as any)

const AppServersCreateRoute = AppServersCreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => AppServersRouteRoute,
} as any)

const AppServersServerIdIndexRoute = AppServersServerIdIndexImport.update({
  id: '/$serverId/',
  path: '/$serverId/',
  getParentRoute: () => AppServersRouteRoute,
} as any)

const AppServersServerIdBotsNewRoute = AppServersServerIdBotsNewImport.update({
  id: '/$serverId/bots/new',
  path: '/$serverId/bots/new',
  getParentRoute: () => AppServersRouteRoute,
} as any)

const AppServersServerIdBotsBotIdIndexRoute =
  AppServersServerIdBotsBotIdIndexImport.update({
    id: '/$serverId/bots/$botId/',
    path: '/$serverId/bots/$botId/',
    getParentRoute: () => AppServersRouteRoute,
  } as any)

const AppServersServerIdBotsBotIdCommandsNewRoute =
  AppServersServerIdBotsBotIdCommandsNewImport.update({
    id: '/$serverId/bots/$botId/commands/new',
    path: '/$serverId/bots/$botId/commands/new',
    getParentRoute: () => AppServersRouteRoute,
  } as any)

const AppServersServerIdBotsBotIdCommandsCommandNameRoute =
  AppServersServerIdBotsBotIdCommandsCommandNameImport.update({
    id: '/$serverId/bots/$botId/commands/$commandName',
    path: '/$serverId/bots/$botId/commands/$commandName',
    getParentRoute: () => AppServersRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRoute
    }
    '/app/servers': {
      id: '/app/servers'
      path: '/servers'
      fullPath: '/app/servers'
      preLoaderRoute: typeof AppServersRouteImport
      parentRoute: typeof AppRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof AuthRouteImport
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof AuthRouteImport
    }
    '/app/servers/create': {
      id: '/app/servers/create'
      path: '/create'
      fullPath: '/app/servers/create'
      preLoaderRoute: typeof AppServersCreateImport
      parentRoute: typeof AppServersRouteImport
    }
    '/app/servers/': {
      id: '/app/servers/'
      path: '/'
      fullPath: '/app/servers/'
      preLoaderRoute: typeof AppServersIndexImport
      parentRoute: typeof AppServersRouteImport
    }
    '/app/servers/$serverId/': {
      id: '/app/servers/$serverId/'
      path: '/$serverId'
      fullPath: '/app/servers/$serverId'
      preLoaderRoute: typeof AppServersServerIdIndexImport
      parentRoute: typeof AppServersRouteImport
    }
    '/app/servers/$serverId/bots/new': {
      id: '/app/servers/$serverId/bots/new'
      path: '/$serverId/bots/new'
      fullPath: '/app/servers/$serverId/bots/new'
      preLoaderRoute: typeof AppServersServerIdBotsNewImport
      parentRoute: typeof AppServersRouteImport
    }
    '/app/servers/$serverId/bots/$botId/': {
      id: '/app/servers/$serverId/bots/$botId/'
      path: '/$serverId/bots/$botId'
      fullPath: '/app/servers/$serverId/bots/$botId'
      preLoaderRoute: typeof AppServersServerIdBotsBotIdIndexImport
      parentRoute: typeof AppServersRouteImport
    }
    '/app/servers/$serverId/bots/$botId/commands/$commandName': {
      id: '/app/servers/$serverId/bots/$botId/commands/$commandName'
      path: '/$serverId/bots/$botId/commands/$commandName'
      fullPath: '/app/servers/$serverId/bots/$botId/commands/$commandName'
      preLoaderRoute: typeof AppServersServerIdBotsBotIdCommandsCommandNameImport
      parentRoute: typeof AppServersRouteImport
    }
    '/app/servers/$serverId/bots/$botId/commands/new': {
      id: '/app/servers/$serverId/bots/$botId/commands/new'
      path: '/$serverId/bots/$botId/commands/new'
      fullPath: '/app/servers/$serverId/bots/$botId/commands/new'
      preLoaderRoute: typeof AppServersServerIdBotsBotIdCommandsNewImport
      parentRoute: typeof AppServersRouteImport
    }
  }
}

// Create and export the route tree

interface AppServersRouteRouteChildren {
  AppServersCreateRoute: typeof AppServersCreateRoute
  AppServersIndexRoute: typeof AppServersIndexRoute
  AppServersServerIdIndexRoute: typeof AppServersServerIdIndexRoute
  AppServersServerIdBotsNewRoute: typeof AppServersServerIdBotsNewRoute
  AppServersServerIdBotsBotIdIndexRoute: typeof AppServersServerIdBotsBotIdIndexRoute
  AppServersServerIdBotsBotIdCommandsCommandNameRoute: typeof AppServersServerIdBotsBotIdCommandsCommandNameRoute
  AppServersServerIdBotsBotIdCommandsNewRoute: typeof AppServersServerIdBotsBotIdCommandsNewRoute
}

const AppServersRouteRouteChildren: AppServersRouteRouteChildren = {
  AppServersCreateRoute: AppServersCreateRoute,
  AppServersIndexRoute: AppServersIndexRoute,
  AppServersServerIdIndexRoute: AppServersServerIdIndexRoute,
  AppServersServerIdBotsNewRoute: AppServersServerIdBotsNewRoute,
  AppServersServerIdBotsBotIdIndexRoute: AppServersServerIdBotsBotIdIndexRoute,
  AppServersServerIdBotsBotIdCommandsCommandNameRoute:
    AppServersServerIdBotsBotIdCommandsCommandNameRoute,
  AppServersServerIdBotsBotIdCommandsNewRoute:
    AppServersServerIdBotsBotIdCommandsNewRoute,
}

const AppServersRouteRouteWithChildren = AppServersRouteRoute._addFileChildren(
  AppServersRouteRouteChildren,
)

interface AppRouteRouteChildren {
  AppServersRouteRoute: typeof AppServersRouteRouteWithChildren
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppServersRouteRoute: AppServersRouteRouteWithChildren,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

interface AuthRouteRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/app': typeof AppRouteRouteWithChildren
  '/auth': typeof AuthRouteRouteWithChildren
  '/app/servers': typeof AppServersRouteRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/app/servers/create': typeof AppServersCreateRoute
  '/app/servers/': typeof AppServersIndexRoute
  '/app/servers/$serverId': typeof AppServersServerIdIndexRoute
  '/app/servers/$serverId/bots/new': typeof AppServersServerIdBotsNewRoute
  '/app/servers/$serverId/bots/$botId': typeof AppServersServerIdBotsBotIdIndexRoute
  '/app/servers/$serverId/bots/$botId/commands/$commandName': typeof AppServersServerIdBotsBotIdCommandsCommandNameRoute
  '/app/servers/$serverId/bots/$botId/commands/new': typeof AppServersServerIdBotsBotIdCommandsNewRoute
}

export interface FileRoutesByTo {
  '/app': typeof AppRouteRouteWithChildren
  '/auth': typeof AuthRouteRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/app/servers/create': typeof AppServersCreateRoute
  '/app/servers': typeof AppServersIndexRoute
  '/app/servers/$serverId': typeof AppServersServerIdIndexRoute
  '/app/servers/$serverId/bots/new': typeof AppServersServerIdBotsNewRoute
  '/app/servers/$serverId/bots/$botId': typeof AppServersServerIdBotsBotIdIndexRoute
  '/app/servers/$serverId/bots/$botId/commands/$commandName': typeof AppServersServerIdBotsBotIdCommandsCommandNameRoute
  '/app/servers/$serverId/bots/$botId/commands/new': typeof AppServersServerIdBotsBotIdCommandsNewRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/app': typeof AppRouteRouteWithChildren
  '/auth': typeof AuthRouteRouteWithChildren
  '/app/servers': typeof AppServersRouteRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/app/servers/create': typeof AppServersCreateRoute
  '/app/servers/': typeof AppServersIndexRoute
  '/app/servers/$serverId/': typeof AppServersServerIdIndexRoute
  '/app/servers/$serverId/bots/new': typeof AppServersServerIdBotsNewRoute
  '/app/servers/$serverId/bots/$botId/': typeof AppServersServerIdBotsBotIdIndexRoute
  '/app/servers/$serverId/bots/$botId/commands/$commandName': typeof AppServersServerIdBotsBotIdCommandsCommandNameRoute
  '/app/servers/$serverId/bots/$botId/commands/new': typeof AppServersServerIdBotsBotIdCommandsNewRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/app'
    | '/auth'
    | '/app/servers'
    | '/auth/login'
    | '/auth/register'
    | '/app/servers/create'
    | '/app/servers/'
    | '/app/servers/$serverId'
    | '/app/servers/$serverId/bots/new'
    | '/app/servers/$serverId/bots/$botId'
    | '/app/servers/$serverId/bots/$botId/commands/$commandName'
    | '/app/servers/$serverId/bots/$botId/commands/new'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/app'
    | '/auth'
    | '/auth/login'
    | '/auth/register'
    | '/app/servers/create'
    | '/app/servers'
    | '/app/servers/$serverId'
    | '/app/servers/$serverId/bots/new'
    | '/app/servers/$serverId/bots/$botId'
    | '/app/servers/$serverId/bots/$botId/commands/$commandName'
    | '/app/servers/$serverId/bots/$botId/commands/new'
  id:
    | '__root__'
    | '/app'
    | '/auth'
    | '/app/servers'
    | '/auth/login'
    | '/auth/register'
    | '/app/servers/create'
    | '/app/servers/'
    | '/app/servers/$serverId/'
    | '/app/servers/$serverId/bots/new'
    | '/app/servers/$serverId/bots/$botId/'
    | '/app/servers/$serverId/bots/$botId/commands/$commandName'
    | '/app/servers/$serverId/bots/$botId/commands/new'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppRouteRoute: typeof AppRouteRouteWithChildren
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AppRouteRoute: AppRouteRouteWithChildren,
  AuthRouteRoute: AuthRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/app",
        "/auth"
      ]
    },
    "/app": {
      "filePath": "app/route.tsx",
      "children": [
        "/app/servers"
      ]
    },
    "/auth": {
      "filePath": "auth/route.tsx",
      "children": [
        "/auth/login",
        "/auth/register"
      ]
    },
    "/app/servers": {
      "filePath": "app/servers/route.tsx",
      "parent": "/app",
      "children": [
        "/app/servers/create",
        "/app/servers/",
        "/app/servers/$serverId/",
        "/app/servers/$serverId/bots/new",
        "/app/servers/$serverId/bots/$botId/",
        "/app/servers/$serverId/bots/$botId/commands/$commandName",
        "/app/servers/$serverId/bots/$botId/commands/new"
      ]
    },
    "/auth/login": {
      "filePath": "auth/login.tsx",
      "parent": "/auth"
    },
    "/auth/register": {
      "filePath": "auth/register.tsx",
      "parent": "/auth"
    },
    "/app/servers/create": {
      "filePath": "app/servers/create.tsx",
      "parent": "/app/servers"
    },
    "/app/servers/": {
      "filePath": "app/servers/index.tsx",
      "parent": "/app/servers"
    },
    "/app/servers/$serverId/": {
      "filePath": "app/servers/$serverId/index.tsx",
      "parent": "/app/servers"
    },
    "/app/servers/$serverId/bots/new": {
      "filePath": "app/servers/$serverId/bots/new.tsx",
      "parent": "/app/servers"
    },
    "/app/servers/$serverId/bots/$botId/": {
      "filePath": "app/servers/$serverId/bots/$botId/index.tsx",
      "parent": "/app/servers"
    },
    "/app/servers/$serverId/bots/$botId/commands/$commandName": {
      "filePath": "app/servers/$serverId/bots/$botId/commands/$commandName.tsx",
      "parent": "/app/servers"
    },
    "/app/servers/$serverId/bots/$botId/commands/new": {
      "filePath": "app/servers/$serverId/bots/$botId/commands/new.tsx",
      "parent": "/app/servers"
    }
  }
}
ROUTE_MANIFEST_END */
